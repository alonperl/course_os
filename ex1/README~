Task 1.

dup(2) duplicates stderr file descriptor to a new file descriptor that gets lowest numbered unused descriptor (3 in our case). Now if we print something to 3 it will output to stderr.

fcntl(3, F_GETFL) performs F_GETFL operation on the (previously duplicated) descriptor: gets its access mode and status flags, returns a numerical value of file status flags. (strace prints also the meaning of that numerical value - in our case 0_RDWR and 0_LARGEFILE).

brk(0) tries to change current break value to the argument but since it is 0 it is not valid at any time so the brk(0) returns the current break value.

brk(0x1d2f000) (the argument in your program is relative to current break) tries to change current break value to the argument and succeeds and thus returns new break value.

fstat(3, {st_mode=S_IFCHR|0620, st_rdev=makedev(136, 0), ...}) gets file status by descriptor (first arg) and puts the result in the second arg (special struct), where we explicitly set the st_mode and st_rdev fields. Returns zero if succeed.

mmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) creates a new mapping in the virtual address space of the calling process. First argument is NULL therefore the kernel chooses the starting address of the mapping. Second arg is the desired length of the mapping. Third arg is the memory protection which is read/write in our case. Fourth arg sets the mapping to be invisible to other processes (MAP_PRIVATE) and also sets it to be not backed up by any file and is initialized to zeros (MAP_ANONYMOUS). Fifth -1 is just a required settlement for such an anonimity. Seventh arg 0 is ignored in the case of anonimity, but in other cases specifies offset. Returns the address of the new mapping.

lseek(3, 0, SEEK_CUR) tries to reposition the offset of the open file, yet setting offset (2nd arg) to zero is useful to check if the reference file is capable of seeking. Here it is not as fd=3 in our case is stderr which is a terminal device. Thus returned -1 and set errno to ESPIPE.

write(3, "Only a single argument is suppor"..., 36) tries to write given string, up to 36 bytes to fd=3 (stderr), and succeeds and thus returns 36 (the number of bytes written).

write(3, ": Success\n", 10) - same here.

close(3) closes fd=3 file.

munmap(0x7ff722910000, 4096) unmaps the mapped memory from given address of given length.

exit_group(0) exits all threads of the process.

We concluded the above using manpages and google.

Task 2.
1)
Lets look at the following example of bad side effects that might happen:
a) First process (I) writes 1's to a file, and suddenly an interrupt happens (e.g. user started another process (II)). The IC notifies the CPU and CPU immediately saves the state of current process (I) and handles the interrupt. At this time, before (I) gets control back, (II) writes 0's to the very same file. When it is finished, the previous state is restored and (I) keeps writing 1's (possibly) from the same point it was interrupted without "knowing" that there are 0's before that point now.

b) Some process is destined to print "1" every round hour, but suddenly interrupted. After it gets its control back, the round hour exactly passed and the result will not be printed until next round hour.

2)
The idea of blocking all interrupts under certain circumstances is not a very good one. Even though there would be no collisions (e.g. in the file write and other side effects), but the system will freeze (as for user) entirely until the process is complete. Furthermore, crutial interrupts (e.g. cooling system) will be put on hold and may cause entire system crashes, etc.

Task 3.

